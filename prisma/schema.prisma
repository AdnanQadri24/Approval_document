// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  document      Document[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // "rejection", "approval", "info"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  documentId String?
  document  Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model Document {
  id String @id @default(cuid())
  title String
  summary String?
  fileUrl String?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  status String @default("pending") // pending, approved, rejected
  notes String? // untuk catatan dari manager
  managerApproved Boolean @default(false) // apakah sudah disetujui manager
  managerNotes String? // catatan dari manager
  standardizationApproved Boolean @default(false) // apakah sudah disetujui standarisasi
  standardizationNotes String? // catatan dari standarisasi
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[] // tambahkan ini
}